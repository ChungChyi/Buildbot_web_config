# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from datetime import timedelta
from myWebUI import MyMenu,mybuildapp
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from sql_buildbot import *
engine = create_engine("mysql+pymysql://root:jkljkl147@localhost:3306/sql_buildbot_config",encoding="utf-8")
DBSession = sessionmaker(bind=engine)

c = BuildmasterConfig = {}

# disable usage data
c['buildbotNetUsageData'] = None

# 利用sqlalchemy工具从数据库中读取数据，然后将读取的数据配置给BuildmasterConfig字典。

####### WORKERS
c['workers'] = []
session = DBSession()
wker = session.query(Workers).all()
for i in range(len(wker)):
    worker_name = wker[i].worker_name
    pw = wker[i].password
    c['workers'].append(worker.Worker(worker_name,pw))
session.close()



####### CHANGESOURCES

c['change_source'] = []
session = DBSession()
cs = session.query(ChangeSource).all()
for i in range(len(cs)):
    repourl = cs[i].repourl
    branches = cs[i].branches.split(',')
    poll_interval = cs[i].poll_interval
    c['change_source'].append(changes.GitPoller(
        gitbin='D:\\Git\\bin\\git.exe',
        repourl=repourl,
        workdir='gitpoller-workdir', branches=branches,
        pollInterval=poll_interval))
session.close()

####### SCHEDULERS

c['schedulers'] = []

session = DBSession()
sche = session.query(Schedulers).all()

for i in range(len(sche)):
    scheduler_type = sche[i].scheduler_type
    scheduler_name = sche[i].scheduler_name
    builderNames = list(builder.builder_name for builder in sche[i].builders)
    if scheduler_type == 'SingleBranchScheduler':
        single = session.query(SingleBranch).filter_by(scheduler_name=scheduler_name).first()
        branch = single.branch
        treeStableTimer = single.tree_stable_timer

        c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name=scheduler_name,
                            change_filter=util.ChangeFilter(branch=branch),
                            treeStableTimer=treeStableTimer,
                            builderNames=builderNames))

    elif scheduler_type == 'ForceScheduler':
        force = session.query(Force).filter_by(scheduler_name=scheduler_name).first()

        c['schedulers'].append(schedulers.ForceScheduler(
                            name=scheduler_name,
                            builderNames=builderNames))


    elif scheduler_type == 'Periodic':
        periodic = session.query(Periodic).filter_by(scheduler_name=scheduler_name).first()
        periodicBuildTimer = periodic.periodic_build_timer

        c['schedulers'].append(schedulers.Periodic(name=scheduler_name,
                              builderNames=builderNames,
                              periodicBuildTimer=periodicBuildTimer))
session.close()

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.
c['builders'] = []

ssession = DBSession()
builders = session.query(Builders).all()

for i in range(len(builders)):
    builder_name = builders[i].builder_name
    workerNames = list(worker.worker_name for worker in builders[i].workers)
    f = session.query(Factory).filter_by(builder_name=builder_name).first()
    repourl = f.repourl
    factory = util.BuildFactory()
    factory.addStep(steps.Git(repourl=repourl, mode='incremental'))
    shellcommands = f.commands

    for j in range(len(shellcommands)):
        shellcommand = shellcommands[j].command.split(',')
        factory.addStep(steps.ShellCommand(command=shellcommand,env={"PYTHONPATH": "."}))

    c['builders'].append(
        util.BuilderConfig(name=builder_name,
                           workernames=workerNames,
                           factory=factory))
session.close()



###### Builder Priority Functions

session = DBSession()
pro = session.query(PrioritizeBuilders).all()
prodict = {}
for i in range(len(pro)):
    builder_name = pro[i].builder_name
    priority_num = pro[i].priority_num
    prodict[builder_name] = priority_num

def prioritizeBuilders(buildmaster, builders):
    builderPriorities =prodict
    builders.sort(key=lambda b: builderPriorities.get(b.name, 100))
    return builders
c['prioritizeBuilders'] = prioritizeBuilders

session.close()

####### PROJECT IDENTITY

session = DBSession()
project = session.query(GlobalConfig).all()
for i in range(len(project)):
    name = project[i].name
    value = project[i].value
    c[name] = value
session.close()

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []
#c['services'].append(reporters.IRC(host="irc.freenode.net", nick="bbtest",
#                                   channels=["#zqchannel"]))
c['services'].append(reporters.IRC(host="irc.ircnet.com", nick="bbtest",
                                   channels=["#zqchannel"],
                                   authz={('force', 'stop'): True}))


mn = reporters.MailNotifier(fromaddr="chungchyi@163.com",
                            sendToInterestedUsers=False,
                            extraRecipients=['351176904@qq.com'],
                            relayhost="smtp.163.com",
                            smtpUser="chungchyi@163.com",
                            smtpPassword="PRAWCFLOFVYKVBIQ")
c['services'].append(mn)



####### Web Server Configuration
# config to activate the web UI
c['www'] = dict(port=8010,
#                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}, dbconfig={}))
c['www']['authz'] = util.Authz(
        allowRules = [
            util.AnyEndpointMatcher(role="admins")
        ],
        roleMatchers = [
            util.RolesFromUsername(roles=['admins'], usernames=['ZhongQi'])
        ]
)
c['www']['auth'] = util.UserPasswordAuth([('ZhongQi','Passwordzq')])

versions = [
('master.cfg', '0.1'),
('OS', 'Windows 10')
]

c['www']['versions'] = versions

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}

####### CONFIGURATORS

# configure a janitor which will delete all logs older than one month,
# and will run on sundays at noon
# every six days to do this
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=12,
    dayOfWeek=6
)]

# Here we assume c['www']['plugins'] has already be created earlier.
# Please see the web server documentation to understand how to configure
# the other parts.
# This is a list of dashboards, you can create several
c['www']['plugins']['wsgi_dashboards'] = [
    {
        'name': 'SearchBuild',  # as used in URLs
        'caption': 'My Menu',  # Title displayed in the UI'
        'app': MyMenu,
        # priority of the dashboard in the left menu (lower is higher in the
        # menu)
        'order': 2,
        # An available icon list can be found at http://fontawesome.io/icons/. Double-check
        # the buildbot about dashboard for the installed version of Font Awesome as the
        # published icons may include more recently additions.
        'icon': 'search'
    },
    {
        'name': 'BuildListSetting',  # as used in URLs
        'caption': 'Build List',  # Title displayed in the UI'
        'app': mybuildapp,
        # priority of the dashboard in the left menu (lower is higher in the
        # menu)
        'order': 3,
        # An available icon list can be found at http://fontawesome.io/icons/. Double-check
        # the buildbot about dashboard for the installed version of Font Awesome as the
        # published icons may include more recently additions.
        'icon': 'area-chart'
    }
]



