# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# disable usage data
c['buildbotNetUsageData'] = None

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("example-worker", "pass", max_builds=10),
                worker.Worker("workerHP","passwordHP", max_builds=10)]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        gitbin='D:\\Git\\bin\\git.exe',
        repourl='https://github.com/buildbot/hello-world.git',
        workdir='gitpoller-workdir', branch='master',
        pollInterval=60*60*12))

c['change_source'].append(changes.GitPoller(
        gitbin='D:\\Git\\bin\\git.exe',
        repourl='https://github.com/ChungChyi/My-machine-learning-course-project.git',
        workdir='gitpoller-workdir', branch='first_branch_720',
        pollInterval=60*60*12))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

quick = schedulers.SingleBranchScheduler(
                            name="quick",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=60,
                            builderNames=["runtests"]);
full = schedulers.SingleBranchScheduler(
                            name="full",
                            change_filter=util.ChangeFilter(branch='first_branch_720'),
                            treeStableTimer=600,
                            builderNames=["my_runtests"]);
c['schedulers'].append(quick)
c['schedulers'].append(full)

forcebuild = schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests","my_runtests"])

c['schedulers'].append(forcebuild)

nightly = schedulers.Periodic(name="daily_build",
                              builderNames=["runtests","my_runtests"],
                              periodicBuildTimer=24*60*60)
c['schedulers'].append(nightly)



#from buildbot.scheduler import Try_Userpass
#c['schedulers'] = []
#c['schedulers'].append(Try_Userpass(
#                                    name='try',
#                                    builderNames=['runtests'],
#                                    port=5555,
#                                    userpass=[('sampleuser','samplepass')]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='https://github.com/buildbot/hello-world.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["trial", "hello"],
                                   env={"PYTHONPATH": "."}))

factory_zq = util.BuildFactory()
factory_zq.addStep(steps.Git(repourl='https://github.com/ChungChyi/My-machine-learning-course-project.git', mode='incremental'))
factory_zq.addStep(steps.ShellCommand(command=["trial", "math_demo"],
                                   env={"PYTHONPATH": "."}))


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests",
      workernames=["example-worker","workerHP"],
      factory=factory))

c['builders'].append(
    util.BuilderConfig(name="my_runtests",
      workernames=["workerHP"],
      factory=factory_zq))


#Builder Priority Functions
def prioritizeBuilders(buildmaster, builders):
    builderPriorities = {
        "my_runtests": 0,
        "runtests": 1,
    }
    builders.sort(key=lambda b: builderPriorities.get(b.name, 0))
    return builders
c['prioritizeBuilders'] = prioritizeBuilders

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []
#c['services'].append(reporters.IRC(host="irc.freenode.net", nick="bbtest",
#                                   channels=["#zqchannel"]))
c['services'].append(reporters.IRC(host="irc.ircnet.com", nick="bbtest",
                                   channels=["#zqchannel"],
                                   authz={('force', 'stop'): True}))


mn = reporters.MailNotifier(fromaddr="chungchyi@163.com",
                            sendToInterestedUsers=False,
                            extraRecipients=['351176904@qq.com'],
                            relayhost="smtp.163.com",
                            smtpUser="chungchyi@163.com",
                            smtpPassword="PRAWCFLOFVYKVBIQ")
c['services'].append(mn)
####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Hi, All"
#c['titleURL'] = "https://buildbot.github.io/hello-world/"
c['titleURL'] = "https://github.com/ChungChyi";
# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.
#c['buildbotURL'] = "http://110.85.45.195:8010/"
c['buildbotURL'] = "http://laptop-3agq5vtq:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
#                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
                plugins=dict(console_view={}, grid_view={}))
c['www']['authz'] = util.Authz(
        allowRules = [
            util.AnyEndpointMatcher(role="admins")
        ],
        roleMatchers = [
            util.RolesFromUsername(roles=['admins'], usernames=['ZhongQi'])
        ]
)
c['www']['auth'] = util.UserPasswordAuth([('ZhongQi','Passwordzq')])

#c['www'] = {
#    'plugins': {'badges': {}}
#}

#c['www'] = {
#    'plugins': {
#        'badges': {
#            "left_pad": 0,
#            "right_pad": 0,
#            "border_radius": 3,
#            "style": "badgeio"
#        }
#    }
#}


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}



import os

from flask import Flask
from flask import render_template

from buildbot.process.results import statusToString

mydashboardapp = Flask('test', root_path=os.path.dirname(__file__))
# this allows to work on the template without having to restart Buildbot
mydashboardapp.config['TEMPLATES_AUTO_RELOAD'] = True


@mydashboardapp.route("/index.html")
def main():
    # This code fetches build data from the data api, and give it to the
    # template
    builders = mydashboardapp.buildbot_api.dataGet("/builders")

    builds = mydashboardapp.buildbot_api.dataGet("/builds", limit=20)

    # properties are actually not used in the template example, but this is
    # how you get more properties
    for build in builds:
        build['properties'] = mydashboardapp.buildbot_api.dataGet(
            ("builds", build['buildid'], "properties"))

        build['results_text'] = statusToString(build['results'])

    graph_data = [
        {'x': 1, 'y': 100},
        {'x': 2, 'y': 200},
        {'x': 3, 'y': 300},
        {'x': 4, 'y': 0},
        {'x': 5, 'y': 100},
        {'x': 6, 'y': 200},
        {'x': 7, 'y': 300},
        {'x': 8, 'y': 0},
        {'x': 9, 'y': 100},
        {'x': 10, 'y': 200},
    ]

    # mydashboard.html is a template inside the template directory
    return render_template('mydashboard.html', builders=builders, builds=builds,
                           graph_data=graph_data)


# Here we assume c['www']['plugins'] has already be created earlier.
# Please see the web server documentation to understand how to configure
# the other parts.
# This is a list of dashboards, you can create several
c['www']['plugins']['wsgi_dashboards'] = [
    {
        'name': 'mydashboard',  # as used in URLs
        'caption': 'My Dashboard',  # Title displayed in the UI'
        'app': mydashboardapp,
        # priority of the dashboard in the left menu (lower is higher in the
        # menu)
        'order': 5,
        # An available icon list can be found at http://fontawesome.io/icons/. Double-check
        # the buildbot about dashboard for the installed version of Font Awesome as the
        # published icons may include more recently additions.
        'icon': 'area-chart'
    }
]

